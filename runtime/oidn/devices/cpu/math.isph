// Copyright 2009 Intel Corporation
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "platform.isph"

// -------------------------------------------------------------------------------------------------
// Constants
// -------------------------------------------------------------------------------------------------

#define inf     floatbits(0x7F800000)
#define pos_inf floatbits(0x7F800000)
#define neg_inf floatbits(0xFF800000)
#define nan     floatbits(0x7FBFFFFF)
#define pos_max floatbits(0x7F7FFFFF)
#define neg_max floatbits(0xFF7FFFFF)
#define pos_min floatbits(0x00800000)

#define M_PI     3.14159265358979323846f
#define pi       3.14159265358979323846f
#define two_pi   6.283185307179586232f
#define four_pi 12.566370614359172464f

#define one_over_pi      0.31830988618379069122f
#define one_over_two_pi  0.15915494309189534561f
#define one_over_four_pi 0.079577471545947672804f
#define one_over_two_pi_sqr 0.050660591821168885722f
#define lntwo_over_two 0.346573590279972654709f

// -------------------------------------------------------------------------------------------------
// Functions
// -------------------------------------------------------------------------------------------------

inline uniform float sqr(uniform float x) { return x*x; }
inline varying float sqr(varying float x) { return x*x; }

inline uniform float rcp_safe(uniform float x) { return rcp((abs(x) < 1e-8f) ? 1e-8f : x); }
inline varying float rcp_safe(varying float x) { return rcp((abs(x) < 1e-8f) ? 1e-8f : x); }

inline uniform float sqrt_safe(uniform float x) { return sqrt(max(x, 0.f)); }
inline varying float sqrt_safe(varying float x) { return sqrt(max(x, 0.f)); }

inline uniform float clamp(uniform float x) { return clamp(x, 0.f, 1.f); }
inline varying float clamp(varying float x) { return clamp(x, 0.f, 1.f); }

inline uniform float frac(uniform float x) { return x - floor(x); }
inline varying float frac(varying float x) { return x - floor(x); }

inline uniform float deg2rad(uniform float x) { return x * 1.74532925199432957692e-2f; }
inline varying float deg2rad(varying float x) { return x * 1.74532925199432957692e-2f; }

inline uniform float rad2deg(uniform float x) { return x * 5.72957795130823208768e1f; }
inline varying float rad2deg(varying float x) { return x * 5.72957795130823208768e1f; }

inline float cos2sin(float x) { return sqrt(max(0.f, 1.f - sqr(x))); }
inline float sin2cos(float x) { return cos2sin(x); }

inline uniform bool isfinite(uniform float x) {
  return (intbits(x) & 0x7F800000) != 0x7F800000;
}
inline varying bool isfinite(varying float x) {
  return (intbits(x) & 0x7F800000) != 0x7F800000;
}

inline uniform float nextafter(uniform float a, uniform float b)
{
  // Match the behavior of the C99 math.h function
  if (a == b) return b;

  // We will compute the smallest representable floating increment or decrement around 'a'
  uniform float delta = (b > a) ? 1.f : -1.f;

  // Iteratively compute the positive or negative increment
  while (a + 0.5f * delta != a) delta *= 0.5f;

  // Return the smallest number greater than 'a' or the largest number smaller than 'a'
  return a + delta;
}

inline uniform float lerp(uniform float f, uniform float a, uniform float b) {
  return (1.f-f) * a + f * b;
}
inline varying float lerp(varying float f, varying float a, varying float b) {
  return (1.f-f) * a + f * b;
}

inline uniform int to_int(uniform float x) { return (int)x; }
inline varying int to_int(varying float x) { return (int)x; }

inline uniform float to_float(uniform int x) { return (float)x; }
inline varying float to_float(varying int x) { return (float)x; }

inline uniform float to_float_unorm(uniform unsigned int x) {
  return (float)x * 2.3283064365386962890625e-10; // x / 2^32
}
inline varying float to_float_unorm(varying unsigned int x) {
  return (float)x * 2.3283064365386962890625e-10; // x / 2^32
}

// Maps nan to zero
inline uniform float nan_to_zero(uniform float x) {
  return isnan(x) ? 0.f : x;
}
inline varying float nan_to_zero(varying float x) {
  return isnan(x) ? 0.f : x;
}