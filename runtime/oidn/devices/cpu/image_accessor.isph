// Copyright 2018 Intel Corporation
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "vec.isph"

enum DataType
{
  DataType_Void,
  DataType_UInt8,
  DataType_Float16,
  DataType_Float32,
};

struct ImageAccessor
{
  uniform uint8* uniform ptr;
  uniform size_t hByteStride; // row stride in number of bytes
  uniform size_t wByteStride; // pixel stride in number of bytes
  uniform DataType dataType;  // data type
  uniform int C, H, W;        // channels (1-3), height, width
};

inline size_t Image_getByteOffset(const uniform ImageAccessor& img, uniform int h, int w)
{
  return (uniform size_t)h * img.hByteStride + (size_t)w * img.wByteStride;
}

inline vec3f Image_get3(const uniform ImageAccessor& img, uniform int h, int w)
{
  const size_t byteOffset = Image_getByteOffset(img, h, w);
  if (img.dataType == DataType_Float32)
  {
    const uniform float* pixel = (const uniform float*)&img.ptr[byteOffset];
    if (img.C == 3)
      return make_vec3f(pixel[0], pixel[1], pixel[2]);
    else if (img.C == 2)
      return make_vec3f(pixel[0], pixel[1], pixel[1]);
    else // if (img.C == 1)
      return make_vec3f(pixel[0], pixel[0], pixel[0]);
  }
  else // if (img.dataType == DataType_Float16)
  {
    const uniform int16* pixel = (const uniform int16*)&img.ptr[byteOffset];
    if (img.C == 3)
      return make_vec3f(half_to_float(pixel[0]), half_to_float(pixel[1]), half_to_float(pixel[2]));
    else if (img.C == 2)
      return make_vec3f(half_to_float(pixel[0]), half_to_float(pixel[1]), half_to_float(pixel[1]));
    else // if (img.C == 1)
      return make_vec3f(half_to_float(pixel[0]), half_to_float(pixel[0]), half_to_float(pixel[0]));
  }
}

inline void Image_set3(const uniform ImageAccessor& img, uniform int h, int w, const vec3f& value)
{
  const size_t byteOffset = Image_getByteOffset(img, h, w);
  if (img.dataType == DataType_Float32)
  {
    uniform float* pixel = (uniform float*)&img.ptr[byteOffset];
    if (img.C == 3)
    {
      pixel[0] = value.x;
      pixel[1] = value.y;
      pixel[2] = value.z;
    }
    else if (img.C == 2)
    {
      pixel[0] = value.x;
      pixel[1] = value.y;
    }
    else // if (img.C == 1)
      pixel[0] = value.x;
  }
  else // if (img.dataType == DataType_Float16)
  {
    uniform int16* pixel = (uniform int16*)&img.ptr[byteOffset];
    if (img.C == 3)
    {
      pixel[0] = float_to_half(value.x);
      pixel[1] = float_to_half(value.y);
      pixel[2] = float_to_half(value.z);
    }
    else if (img.C == 2)
    {
      pixel[0] = float_to_half(value.x);
      pixel[1] = float_to_half(value.y);
    }
    else // if (img.C == 1)
      pixel[0] = float_to_half(value.x);
  }
}
