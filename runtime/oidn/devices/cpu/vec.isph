// Copyright 2009 Intel Corporation
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "math.isph"

// -------------------------------------------------------------------------------------------------
// Vector types
// -------------------------------------------------------------------------------------------------

#define DEFINE_VEC(TYPE, T)            \
  struct vec2##T { TYPE x, y; };       \
  struct vec3##T { TYPE x, y, z; };    \
  struct vec4##T { TYPE x, y, z, w; };

DEFINE_VEC(float, f);
DEFINE_VEC(int, i);
DEFINE_VEC(unsigned int, ui);
DEFINE_VEC(unsigned int8, uc);
DEFINE_VEC(bool, b);

#undef DEFINE_VEC

// -------------------------------------------------------------------------------------------------
// Constructors
// -------------------------------------------------------------------------------------------------

#define DEFINE_VEC_CONSTRUCTORS_UV_IT(UV, TYPE, T, ITYPE, IT) \
  /* vec2 */                                                  \
  inline UV vec2##T make_vec2##T(UV ITYPE x,                  \
                                 UV ITYPE y) {                \
    UV vec2##T ret;                                           \
    ret.x = x;                                                \
    ret.y = y;                                                \
    return ret;                                               \
  }                                                           \
  inline UV vec2##T make_vec2##T(UV ITYPE x) {                \
    UV vec2##T ret;                                           \
    ret.x = x;                                                \
    ret.y = x;                                                \
    return ret;                                               \
  }                                                           \
  inline UV vec2##T make_vec2##T(UV vec2##IT v) {             \
    UV vec2##T ret;                                           \
    ret.x = v.x;                                              \
    ret.y = v.y;                                              \
    return ret;                                               \
  }                                                           \
  /* vec3 */                                                  \
  inline UV vec3##T make_vec3##T(UV ITYPE x,                  \
                                 UV ITYPE y,                  \
                                 UV ITYPE z) {                \
    UV vec3##T ret;                                           \
    ret.x = x;                                                \
    ret.y = y;                                                \
    ret.z = z;                                                \
    return ret;                                               \
  }                                                           \
  inline UV vec3##T make_vec3##T(UV ITYPE x) {                \
    UV vec3##T ret;                                           \
    ret.x = x;                                                \
    ret.y = x;                                                \
    ret.z = x;                                                \
    return ret;                                               \
  }                                                           \
  inline UV vec3##T make_vec3##T(UV vec3##IT v) {             \
    UV vec3##T ret;                                           \
    ret.x = v.x;                                              \
    ret.y = v.y;                                              \
    ret.z = v.z;                                              \
    return ret;                                               \
  }                                                           \
  inline UV vec3##T make_vec3##T(UV vec4##IT v) {             \
    UV vec3##T ret;                                           \
    ret.x = v.x;                                              \
    ret.y = v.y;                                              \
    ret.z = v.z;                                              \
    return ret;                                               \
  }                                                           \
  /* vec4 */                                                  \
  inline UV vec4##T make_vec4##T(UV ITYPE x,                  \
                                 UV ITYPE y,                  \
                                 UV ITYPE z,                  \
                                 UV ITYPE w) {                \
    UV vec4##T ret;                                           \
    ret.x = x;                                                \
    ret.y = y;                                                \
    ret.z = z;                                                \
    ret.w = w;                                                \
    return ret;                                               \
  }                                                           \
  inline UV vec4##T make_vec4##T(UV ITYPE x) {                \
    UV vec4##T ret;                                           \
    ret.x = x;                                                \
    ret.y = x;                                                \
    ret.z = x;                                                \
    ret.w = x;                                                \
    return ret;                                               \
  }                                                           \
  inline UV vec4##T make_vec4##T(UV vec4##IT v) {             \
    UV vec4##T ret;                                           \
    ret.x = v.x;                                              \
    ret.y = v.y;                                              \
    ret.z = v.z;                                              \
    ret.w = v.w;                                              \
    return ret;                                               \
  }                                                           \
  inline UV vec4##T make_vec4##T(UV vec3##IT v) {             \
    UV vec4##T ret;                                           \
    ret.x = v.x;                                              \
    ret.y = v.y;                                              \
    ret.z = v.z;                                              \
    ret.w = 0;                                                \
    return ret;                                               \
  }                                                           \
  inline UV vec4##T make_vec4##T(UV vec3##IT xyz,             \
                                 UV ITYPE    w) {             \
    UV vec4##T ret;                                           \
    ret.x = xyz.x;                                            \
    ret.y = xyz.y;                                            \
    ret.z = xyz.z;                                            \
    ret.w = w;                                                \
    return ret;                                               \
  }

#define DEFINE_VEC_CONSTRUCTORS_IT(TYPE, T, ITYPE, IT)       \
  DEFINE_VEC_CONSTRUCTORS_UV_IT(uniform, TYPE, T, ITYPE, IT) \
  DEFINE_VEC_CONSTRUCTORS_UV_IT(varying, TYPE, T, ITYPE, IT)

#define DEFINE_VEC_CONSTRUCTORS(TYPE, T)                 \
  DEFINE_VEC_CONSTRUCTORS_IT(TYPE, T, float, f)          \
  DEFINE_VEC_CONSTRUCTORS_IT(TYPE, T, int, i)            \
  DEFINE_VEC_CONSTRUCTORS_IT(TYPE, T, unsigned int, ui)  \
  DEFINE_VEC_CONSTRUCTORS_IT(TYPE, T, unsigned int8, uc) \
  DEFINE_VEC_CONSTRUCTORS_IT(TYPE, T, bool, b)

DEFINE_VEC_CONSTRUCTORS(float, f)
DEFINE_VEC_CONSTRUCTORS(int, i)
DEFINE_VEC_CONSTRUCTORS(unsigned int, ui)
DEFINE_VEC_CONSTRUCTORS(unsigned int8, uc)
DEFINE_VEC_CONSTRUCTORS(bool, b)

#undef DEFINE_VEC_CONSTRUCTORS_UV_IT
#undef DEFINE_VEC_CONSTRUCTORS_IT
#undef DEFINE_VEC_CONSTRUCTORS

// -------------------------------------------------------------------------------------------------
// Unary operators
// -------------------------------------------------------------------------------------------------

#define DEFINE_VEC_UNARY_OP_UV(UV, OPERATOR, OP, T)      \
  inline UV vec2##T OPERATOR(UV vec2##T v) {             \
    return make_vec2##T(OP v.x, OP v.y);                 \
  }                                                      \
  inline UV vec3##T OPERATOR(UV vec3##T v) {             \
    return make_vec3##T(OP v.x, OP v.y, OP v.z);         \
  }                                                      \
  inline UV vec4##T OPERATOR(UV vec4##T v) {             \
    return make_vec4##T(OP v.x, OP v.y, OP v.z, OP v.w); \
  }

#define DEFINE_VEC_UNARY_OP(OPERATOR, OP, T)       \
  DEFINE_VEC_UNARY_OP_UV(uniform, OPERATOR, OP, T) \
  DEFINE_VEC_UNARY_OP_UV(varying, OPERATOR, OP, T)

DEFINE_VEC_UNARY_OP(neg, -, f)
DEFINE_VEC_UNARY_OP(neg, -, i)

#undef DEFINE_VEC_UNARY_OP_UV
#undef DEFINE_VEC_UNARY_OP

// -------------------------------------------------------------------------------------------------
// Binary operators
// -------------------------------------------------------------------------------------------------

#define DEFINE_VEC_BINARY_OP_UV(UV, OPERATOR, OP, TYPE, T)               \
  /* vec2 */                                                             \
  inline UV vec2##T OPERATOR(UV vec2##T a, UV vec2##T b) {               \
    return make_vec2##T(a.x OP b.x, a.y OP b.y);                         \
  }                                                                      \
  inline UV vec2##T OPERATOR(UV vec2##T a, UV TYPE b) {                  \
    return make_vec2##T(a.x OP b, a.y OP b);                             \
  }                                                                      \
  inline UV vec2##T OPERATOR(UV TYPE a, UV vec2##T b) {                  \
    return make_vec2##T(a OP b.x, a OP b.y);                             \
  }                                                                      \
  /* vec3 */                                                             \
  inline UV vec3##T OPERATOR(UV vec3##T a, UV vec3##T b) {               \
    return make_vec3##T(a.x OP b.x, a.y OP b.y, a.z OP b.z);             \
  }                                                                      \
  inline UV vec3##T OPERATOR(UV vec3##T a, UV TYPE b) {                  \
    return make_vec3##T(a.x OP b, a.y OP b, a.z OP b);                   \
  }                                                                      \
  inline UV vec3##T OPERATOR(UV TYPE a, UV vec3##T b) {                  \
    return make_vec3##T(a OP b.x, a OP b.y, a OP b.z);                   \
  }                                                                      \
  /* vec4 */                                                             \
  inline UV vec4##T OPERATOR(UV vec4##T a, UV vec4##T b) {               \
    return make_vec4##T(a.x OP b.x, a.y OP b.y, a.z OP b.z, a.w OP b.w); \
  }                                                                      \
  inline UV vec4##T OPERATOR(UV vec4##T a, UV TYPE b) {                  \
    return make_vec4##T(a.x OP b, a.y OP b, a.z OP b, a.w OP b);         \
  }                                                                      \
  inline UV vec4##T OPERATOR(UV TYPE a, UV vec4##T b) {                  \
    return make_vec4##T(a OP b.x, a OP b.y, a OP b.z, a OP b.w);         \
  }                                                                      \

#define DEFINE_VEC_BINARY_OP(OPERATOR, OP, TYPE, T)       \
  DEFINE_VEC_BINARY_OP_UV(uniform, OPERATOR, OP, TYPE, T) \
  DEFINE_VEC_BINARY_OP_UV(varying, OPERATOR, OP, TYPE, T)

#define DEFINE_VEC_BINARY_OPS_ARITH(TYPE, T)  \
  DEFINE_VEC_BINARY_OP(operator+, +, TYPE, T) \
  DEFINE_VEC_BINARY_OP(operator-, -, TYPE, T) \
  DEFINE_VEC_BINARY_OP(operator*, *, TYPE, T) \
  DEFINE_VEC_BINARY_OP(operator/, /, TYPE, T)

DEFINE_VEC_BINARY_OPS_ARITH(float, f)
DEFINE_VEC_BINARY_OPS_ARITH(int, i)
DEFINE_VEC_BINARY_OPS_ARITH(unsigned int, ui)

#define DEFINE_VEC_BINARY_OPS_BIT(TYPE, T)      \
  DEFINE_VEC_BINARY_OP(operator>>, >>, TYPE, T) \
  DEFINE_VEC_BINARY_OP(operator<<, <<, TYPE, T) \
  DEFINE_VEC_BINARY_OP(and, &, TYPE, T)         \
  DEFINE_VEC_BINARY_OP(or,  |, TYPE, T)

DEFINE_VEC_BINARY_OPS_BIT(int, i)
DEFINE_VEC_BINARY_OPS_BIT(unsigned int, ui)

#define DEFINE_VEC_BINARY_OPS_CMP_UV(UV, TYPE, T)                     \
  /* eq */                                                            \
  inline UV bool eq(UV vec2##T a, UV vec2##T b) {                     \
    return a.x==b.x && a.y==b.y;                                      \
  }                                                                   \
  inline UV bool eq(UV vec2##T a, UV TYPE b) {                        \
    return a.x==b && a.y==b;                                          \
  }                                                                   \
  inline UV bool eq(UV vec3##T a, UV vec3##T b) {                     \
    return a.x==b.x && a.y==b.y && a.z==b.z;                          \
  }                                                                   \
  inline UV bool eq(UV vec3##T a, UV TYPE b) {                        \
    return a.x==b && a.y==b && a.z==b;                                \
  }                                                                   \
  inline UV bool eq(UV vec4##T a, UV vec4##T b) {                     \
    return a.x==b.x && a.y==b.y && a.z==b.z && a.w==b.w;              \
  }                                                                   \
  inline UV bool eq(UV vec4##T a, UV TYPE b) {                        \
    return a.x==b && a.y==b && a.z==b && a.w==b;                      \
  }                                                                   \
  /* ne */                                                            \
  inline UV bool ne(UV vec2##T a, UV vec2##T b) { return !eq(a, b); } \
  inline UV bool ne(UV vec2##T a, UV TYPE    b) { return !eq(a, b); } \
  inline UV bool ne(UV vec3##T a, UV vec3##T b) { return !eq(a, b); } \
  inline UV bool ne(UV vec3##T a, UV TYPE    b) { return !eq(a, b); } \
  inline UV bool ne(UV vec4##T a, UV vec4##T b) { return !eq(a, b); } \
  inline UV bool ne(UV vec4##T a, UV TYPE    b) { return !eq(a, b); }

#define DEFINE_VEC_BINARY_OPS_CMP(TYPE, T)       \
  DEFINE_VEC_BINARY_OPS_CMP_UV(uniform, TYPE, T) \
  DEFINE_VEC_BINARY_OPS_CMP_UV(varying, TYPE, T)

DEFINE_VEC_BINARY_OPS_CMP(float, f)
DEFINE_VEC_BINARY_OPS_CMP(int, i)
DEFINE_VEC_BINARY_OPS_CMP(unsigned int, ui)

#undef DEFINE_VEC_BINARY_OP_UV
#undef DEFINE_VEC_BINARY_OP
#undef DEFINE_VEC_BINARY_OPS_ARITH
#undef DEFINE_VEC_BINARY_OPS_BIT
#undef DEFINE_VEC_BINARY_OPS_CMP_UV
#undef DEFINE_VEC_BINARY_OPS_CMP

// -------------------------------------------------------------------------------------------------
// Unary functions
// -------------------------------------------------------------------------------------------------

#define DEFINE_VEC_UNARY_FUNC_UV(UV, F, T, IT)           \
  inline UV vec2##T F(UV vec2##IT v) {                   \
    return make_vec2##T(F(v.x), F(v.y));                 \
  }                                                      \
  inline UV vec3##T F(UV vec3##IT v) {                   \
    return make_vec3##T(F(v.x), F(v.y), F(v.z));         \
  }                                                      \
  inline UV vec4##T F(UV vec4##IT v) {                   \
    return make_vec4##T(F(v.x), F(v.y), F(v.z), F(v.w)); \
  }

#define DEFINE_VEC_UNARY_FUNC(F, T, IT)       \
  DEFINE_VEC_UNARY_FUNC_UV(uniform, F, T, IT) \
  DEFINE_VEC_UNARY_FUNC_UV(varying, F, T, IT)

DEFINE_VEC_UNARY_FUNC(abs, f, f)
DEFINE_VEC_UNARY_FUNC(rcp, f, f)
DEFINE_VEC_UNARY_FUNC(rcp_safe, f, f)
DEFINE_VEC_UNARY_FUNC(floor, f, f)
DEFINE_VEC_UNARY_FUNC(frac, f, f)
DEFINE_VEC_UNARY_FUNC(sqr, f, f)
DEFINE_VEC_UNARY_FUNC(sqrt, f, f)
DEFINE_VEC_UNARY_FUNC(sqrt_safe, f, f)
DEFINE_VEC_UNARY_FUNC(log, f, f)
DEFINE_VEC_UNARY_FUNC(exp, f, f)
DEFINE_VEC_UNARY_FUNC(nan_to_zero, f, f)

DEFINE_VEC_UNARY_FUNC(isnan, b, f)
DEFINE_VEC_UNARY_FUNC(isfinite, b, f)

DEFINE_VEC_UNARY_FUNC(floatbits, f, ui)
DEFINE_VEC_UNARY_FUNC(intbits, ui, f)
DEFINE_VEC_UNARY_FUNC(to_int, i, f)
DEFINE_VEC_UNARY_FUNC(to_float, f, i)
DEFINE_VEC_UNARY_FUNC(to_float_unorm, f, ui)

#undef DEFINE_VEC_UNARY_FUNC_UV
#undef DEFINE_VEC_UNARY_FUNC

// -------------------------------------------------------------------------------------------------
// Binary functions
// -------------------------------------------------------------------------------------------------

#define DEFINE_VEC_BINARY_FUNC_UV(UV, UVA, UVB, F, TYPE, T)     \
  /* vec2 */                                                    \
  inline UV vec2##T F(UVA vec2##T a, UVB vec2##T b) {           \
    return make_vec2##T(F(a.x, b.x), F(a.y, b.y));              \
  }                                                             \
  inline UV vec2##T F(UVA vec2##T a, UVB TYPE b) {              \
    return make_vec2##T(F(a.x, b), F(a.y, b));                  \
  }                                                             \
  inline UV vec2##T F(UVA TYPE a, UVB vec2##T b) {              \
    return make_vec2##T(F(a, b.x), F(a, b.y));                  \
  }                                                             \
  /* vec3 */                                                    \
  inline UV vec3##T F(UVA vec3##T a, UVB vec3##T b) {           \
    return make_vec3##T(F(a.x, b.x), F(a.y, b.y), F(a.z, b.z)); \
  }                                                             \
  inline UV vec3##T F(UVA vec3##T a, UVB TYPE b) {              \
    return make_vec3##T(F(a.x, b), F(a.y, b), F(a.z, b));       \
  }                                                             \
  inline UV vec3##T F(UVA TYPE a, UVB vec3##T b) {              \
    return make_vec3##T(F(a, b.x), F(a, b.y), F(a, b.z));       \
  }                                                             \
  /* vec4 */                                                    \
  inline UV vec4##T F(UVA vec4##T a, UVB vec4##T b) {           \
    return make_vec4##T(F(a.x, b.x), F(a.y, b.y),               \
                        F(a.z, b.z), F(a.w, b.w));              \
  }                                                             \
  inline UV vec4##T F(UVA vec4##T a, UVB TYPE b) {              \
    return make_vec4##T(F(a.x, b), F(a.y, b),                   \
                        F(a.z, b), F(a.w, b));                  \
  }                                                             \
  inline UV vec4##T F(UVA TYPE a, UVB vec4##T b) {              \
    return make_vec4##T(F(a, b.x), F(a, b.y),                   \
                        F(a, b.z), F(a, b.w));                  \
  }


#define DEFINE_VEC_BINARY_FUNC(F, TYPE, T)                         \
  DEFINE_VEC_BINARY_FUNC_UV(uniform, uniform, uniform, F, TYPE, T) \
  DEFINE_VEC_BINARY_FUNC_UV(varying, uniform, varying, F, TYPE, T) \
  DEFINE_VEC_BINARY_FUNC_UV(varying, varying, uniform, F, TYPE, T) \
  DEFINE_VEC_BINARY_FUNC_UV(varying, varying, varying, F, TYPE, T)

DEFINE_VEC_BINARY_FUNC(min, float, f)
DEFINE_VEC_BINARY_FUNC(min, int, i)
DEFINE_VEC_BINARY_FUNC(min, unsigned int, ui)
DEFINE_VEC_BINARY_FUNC(max, float, f)
DEFINE_VEC_BINARY_FUNC(max, int, i)
DEFINE_VEC_BINARY_FUNC(max, unsigned int, ui)
DEFINE_VEC_BINARY_FUNC(pow, float, f)

#undef DEFINE_VEC_BINARY_FUNC_UV
#undef DEFINE_VEC_BINARY_FUNC

// -------------------------------------------------------------------------------------------------
// Clamp functions
// -------------------------------------------------------------------------------------------------

#define DEFINE_VEC_CLAMP3_UV(UV, UVBC, TYPE, T)                                            \
  /* vec2 */                                                                               \
  inline UV vec2##T clamp(UV vec2##T a, UVBC vec2##T b, UVBC vec2##T c) {                  \
    return make_vec2##T(clamp(a.x, b.x, c.x), clamp(a.y, b.y, c.y));                       \
  }                                                                                        \
  inline UV vec2##T clamp(UV vec2##T a, UVBC TYPE b, UVBC TYPE c) {                        \
    return make_vec2##T(clamp(a.x, b, c), clamp(a.y, b, c));                               \
  }                                                                                        \
  /* vec3 */                                                                               \
  inline UV vec3##T clamp(UV vec3##T a, UVBC vec3##T b, UVBC vec3##T c) {                  \
    return make_vec3##T(clamp(a.x, b.x, c.x), clamp(a.y, b.y, c.y), clamp(a.z, b.z, c.z)); \
  }                                                                                        \
  inline UV vec3##T clamp(UV vec3##T a, UVBC TYPE b, UVBC TYPE c) {                        \
    return make_vec3##T(clamp(a.x, b, c), clamp(a.y, b, c), clamp(a.z, b, c));             \
  }                                                                                        \
  /* vec4 */                                                                               \
  inline UV vec4##T clamp(UV vec4##T a, UVBC vec4##T b, UVBC vec4##T c) {                  \
    return make_vec4##T(clamp(a.x, b.x, c.x), clamp(a.y, b.y, c.y),                        \
                        clamp(a.z, b.z, c.z), clamp(a.w, b.w, c.w));                       \
  }                                                                                        \
  inline UV vec4##T clamp(UV vec4##T a, UVBC TYPE b, UVBC TYPE c) {                        \
    return make_vec4##T(clamp(a.x, b, c), clamp(a.y, b, c),                                \
                        clamp(a.z, b, c), clamp(a.w, b, c));                               \
  }

#define DEFINE_VEC_CLAMP1_UV(UV, TYPE, T)                                \
  inline UV vec2##T clamp(UV vec2##T a) {                                \
    return make_vec2##T(clamp(a.x), clamp(a.y));                         \
  }                                                                      \
  inline UV vec3##T clamp(UV vec3##T a) {                                \
    return make_vec3##T(clamp(a.x), clamp(a.y), clamp(a.z));             \
  }                                                                      \
  inline UV vec4##T clamp(UV vec4##T a) {                                \
    return make_vec4##T(clamp(a.x), clamp(a.y), clamp(a.z), clamp(a.w)); \
  }

#define DEFINE_VEC_CLAMP(TYPE, T)                 \
  DEFINE_VEC_CLAMP3_UV(uniform, uniform, TYPE, T) \
  DEFINE_VEC_CLAMP3_UV(varying, uniform, TYPE, T) \
  DEFINE_VEC_CLAMP3_UV(varying, varying, TYPE, T) \
  DEFINE_VEC_CLAMP1_UV(uniform, TYPE, T)          \
  DEFINE_VEC_CLAMP1_UV(varying, TYPE, T)

DEFINE_VEC_CLAMP(float, f)
DEFINE_VEC_CLAMP(int, i)
DEFINE_VEC_CLAMP(unsigned int, ui)

#undef DEFINE_VEC_CLAMP3_UV
#undef DEFINE_VEC_CLAMP1_UV
#undef DEFINE_VEC_CLAMP

// -------------------------------------------------------------------------------------------------
// Select functions
// -------------------------------------------------------------------------------------------------

#define DEFINE_VEC_SELECT_UV(UV, UVA, UVB, T)                                                 \
  inline UV vec2##T select(UV vec2b c, UVA vec2##T a, UVB vec2##T b) {                        \
    return make_vec2##T(select(c.x, a.x, b.x), select(c.y, a.y, b.y));                        \
  }                                                                                           \
  inline UV vec3##T select(UV vec3b c, UVA vec3##T a, UVB vec3##T b) {                        \
    return make_vec3##T(select(c.x, a.x, b.x), select(c.y, a.y, b.y), select(c.z, a.z, b.z)); \
  }                                                                                           \
  inline UV vec4##T select(UV vec4b c, UVA vec4##T a, UVB vec4##T b) {                        \
    return make_vec4##T(select(c.x, a.x, b.x), select(c.y, a.y, b.y),                         \
                        select(c.z, a.z, b.z), select(c.w, a.w, b.w));                        \
  }

#define DEFINE_VEC_SELECT(T)                         \
  DEFINE_VEC_SELECT_UV(uniform, uniform, uniform, T) \
  DEFINE_VEC_SELECT_UV(varying, uniform, uniform, T) \
  DEFINE_VEC_SELECT_UV(varying, uniform, varying, T) \
  DEFINE_VEC_SELECT_UV(varying, varying, uniform, T) \
  DEFINE_VEC_SELECT_UV(varying, varying, varying, T)

DEFINE_VEC_SELECT(f)
DEFINE_VEC_SELECT(i)

#undef DEFINE_VEC_SELECT_UV
#undef DEFINE_VEC_SELECT

// -------------------------------------------------------------------------------------------------
// Reduction functions
// -------------------------------------------------------------------------------------------------

#define DEFINE_VEC_REDUCE_FUNC_UV(UV, F, TYPE, T) \
  inline UV TYPE reduce_##F(UV vec2##T v) {       \
    return F(v.x, v.y);                           \
  }                                               \
  inline UV TYPE reduce_##F(UV vec3##T v) {       \
    return F(F(v.x, v.y), v.z);                   \
  }                                               \
  inline UV TYPE reduce_##F(UV vec4##T v) {       \
    return F(F(v.x, v.y), F(v.z, v.w));           \
  }

#define DEFINE_VEC_REDUCE_FUNC(F, TYPE, T)       \
  DEFINE_VEC_REDUCE_FUNC_UV(uniform, F, TYPE, T) \
  DEFINE_VEC_REDUCE_FUNC_UV(varying, F, TYPE, T)

DEFINE_VEC_REDUCE_FUNC(min, float, f)
DEFINE_VEC_REDUCE_FUNC(min, int, i)
DEFINE_VEC_REDUCE_FUNC(min, unsigned int, ui)
DEFINE_VEC_REDUCE_FUNC(max, float, f)
DEFINE_VEC_REDUCE_FUNC(max, int, i)
DEFINE_VEC_REDUCE_FUNC(max, unsigned int, ui)

#undef DEFINE_VEC_REDUCE_FUNC_UV
#undef DEFINE_VEC_REDUCE_FUNC

#define DEFINE_VEC_REDUCE_OP_UV(UV, OPERATOR, OP, TYPE, T) \
  inline UV TYPE reduce_##OPERATOR(UV vec2##T v) {         \
    return v.x OP v.y;                                     \
  }                                                        \
  inline UV TYPE reduce_##OPERATOR(UV vec3##T v) {         \
    return v.x OP v.y OP v.z;                              \
  }                                                        \
  inline UV TYPE reduce_##OPERATOR(UV vec4##T v) {         \
    return v.x OP v.y OP v.z OP v.w;                       \
  }

#define DEFINE_VEC_REDUCE_OP(OPERATOR, OP, TYPE, T)       \
  DEFINE_VEC_REDUCE_OP_UV(uniform, OPERATOR, OP, TYPE, T) \
  DEFINE_VEC_REDUCE_OP_UV(varying, OPERATOR, OP, TYPE, T)

DEFINE_VEC_REDUCE_OP(add, +, float, f)
DEFINE_VEC_REDUCE_OP(add, +, int, i)
DEFINE_VEC_REDUCE_OP(add, +, unsigned int, ui)
DEFINE_VEC_REDUCE_OP(mul, *, float, f)
DEFINE_VEC_REDUCE_OP(mul, *, int, i)
DEFINE_VEC_REDUCE_OP(mul, *, unsigned int, ui)

#undef DEFINE_VEC_REDUCE_OP_UV
#undef DEFINE_VEC_REDUCE_OP

inline uniform float reduce_avg(uniform vec3f v) {
  return reduce_add(v)*(1.f/3.f);
}
inline varying float reduce_avg(varying vec3f v) {
  return reduce_add(v)*(1.f/3.f);
}

#define DEFINE_VEC_REDUCE_BOOL(UV)                                    \
  /* any */                                                           \
  inline UV bool any(UV vec2b v) { return v.x || v.y; }               \
  inline UV bool any(UV vec3b v) { return v.x || v.y || v.z; }        \
  inline UV bool any(UV vec4b v) { return v.x || v.y || v.z || v.w; } \
  /* all */                                                           \
  inline UV bool all(UV vec2b v) { return v.x && v.y; }               \
  inline UV bool all(UV vec3b v) { return v.x && v.y && v.z; }        \
  inline UV bool all(UV vec4b v) { return v.x && v.y && v.z && v.w; } \
  /* none */                                                          \
  inline UV bool none(UV vec2b v) { return !any(v); }                 \
  inline UV bool none(UV vec3b v) { return !any(v); }                 \
  inline UV bool none(UV vec4b v) { return !any(v); }

DEFINE_VEC_REDUCE_BOOL(uniform)
DEFINE_VEC_REDUCE_BOOL(varying)

#undef DEFINE_VEC_REDUCE_BOOL

// -------------------------------------------------------------------------------------------------
// Geometric functions
// -------------------------------------------------------------------------------------------------

inline uniform float dot(uniform vec3f a, uniform vec3f b) {
  return a.x*b.x + a.y*b.y + a.z*b.z;
}
inline varying float dot(varying vec3f a, varying vec3f b) {
  return a.x*b.x + a.y*b.y + a.z*b.z;
}

inline uniform float length(uniform vec3f a) { return sqrt(dot(a,a)); }
inline varying float length(varying vec3f a) { return sqrt(dot(a,a)); }

inline uniform float distance(uniform vec3f a, uniform vec3f b) { return length(a - b); }
inline varying float distance(varying vec3f a, varying vec3f b) { return length(a - b); }

inline uniform vec3f normalize(uniform vec3f v) { return v * (1.f/sqrt(dot(v,v))); }
inline varying vec3f normalize(varying vec3f v) { return v * (1.f/sqrt(dot(v,v))); }

inline varying vec3f normalize(varying vec3f v, varying float &len) {
  len = sqrt(dot(v,v));
  return v * rcp(len);
}

inline uniform vec3f normalize_safe(uniform vec3f v) {
  const uniform float rcpLen = rsqrt(dot(v,v));
  return isfinite(rcpLen) ? (v * rcpLen) : make_vec3f(0.f);
}
inline varying vec3f normalize_safe(varying vec3f v) {
  const varying float rcpLen = rsqrt(dot(v,v));
  return isfinite(rcpLen) ? (v * rcpLen) : make_vec3f(0.f);
}

// Differentiated normalization
inline varying vec3f dnormalize(varying vec3f p, varying vec3f dp)
{
  const float pp  = dot(p,p);
  const float pdp = dot(p,dp);
  return (pp*dp-pdp*p)*rcp(pp)*rsqrt(pp);
}

#define DEFINE_VEC_CROSS(UV, UVA, UVB)              \
  inline UV vec3f cross(UVA vec3f a, UVB vec3f b) { \
    return make_vec3f(a.y*b.z - a.z*b.y,            \
                      a.z*b.x - a.x*b.z,            \
                      a.x*b.y - a.y*b.x);           \
  }

DEFINE_VEC_CROSS(uniform, uniform, uniform)
DEFINE_VEC_CROSS(varying, varying, varying)
DEFINE_VEC_CROSS(varying, varying, uniform)
DEFINE_VEC_CROSS(varying, uniform, varying)

#undef DEFINE_VEC_CROSS

inline uniform vec3f rotate(uniform vec3f v, uniform vec3f axis, uniform float theta) {
  return v * cos(theta) + cross(axis, v) * sin(theta) + axis * dot(axis, v) * (1.f - cos(theta));
}
inline varying vec3f rotate(varying vec3f v, varying vec3f axis, varying float theta) {
  return v * cos(theta) + cross(axis, v) * sin(theta) + axis * dot(axis, v) * (1.f - cos(theta));
}

// -------------------------------------------------------------------------------------------------
// Interpolation functions
// -------------------------------------------------------------------------------------------------

#define DEFINE_VEC_LERP_UV(UV, TYPE, T)                                                                      \
  /* vec2 */                                                                                                 \
  inline UV vec2##T lerp(UV TYPE f, UV vec2##T a, UV vec2##T b) {                                            \
    return make_vec2##T(lerp(f, a.x, b.x), lerp(f, a.y, b.y));                                               \
  }                                                                                                          \
  inline UV vec2##T lerp(UV vec2f f, UV vec2##T a, UV vec2##T b) {                                           \
    return make_vec2##T(lerp(f.x, a.x, b.x), lerp(f.y, a.y, b.y));                                           \
  }                                                                                                          \
  /* vec3 */                                                                                                 \
  inline UV vec3##T lerp(UV TYPE f, UV vec3##T a, UV vec3##T b) {                                            \
    return make_vec3##T(lerp(f, a.x, b.x), lerp(f, a.y, b.y), lerp(f, a.z, b.z));                            \
  }                                                                                                          \
  inline UV vec3##T lerp(UV vec3f f, UV vec3##T a, UV vec3##T b) {                                           \
    return make_vec3##T(lerp(f.x, a.x, b.x), lerp(f.y, a.y, b.y), lerp(f.z, a.z, b.z));                      \
  }                                                                                                          \
  /* vec4 */                                                                                                 \
  inline UV vec4##T lerp(UV TYPE f, UV vec4##T a, UV vec4##T b) {                                            \
    return make_vec4##T(lerp(f, a.x, b.x), lerp(f, a.y, b.y), lerp(f, a.z, b.z), lerp(f, a.w, b.w));         \
  }                                                                                                          \
  inline UV vec4##T lerp(UV vec4f f, UV vec4##T a, UV vec4##T b) {                                           \
    return make_vec4##T(lerp(f.x, a.x, b.x), lerp(f.y, a.y, b.y), lerp(f.z, a.z, b.z), lerp(f.w, a.w, b.w)); \
  }

#define DEFINE_VEC_LERP(TYPE, T)       \
  DEFINE_VEC_LERP_UV(uniform, TYPE, T) \
  DEFINE_VEC_LERP_UV(varying, TYPE, T)

DEFINE_VEC_LERP(float, f)

#undef DEFINE_VEC_LERP_UV
#undef DEFINE_VEC_LERP

#define DEFINE_VEC_INTERPOLATE_UV(UV, TYPE, T)                          \
  inline TYPE interpolate(vec3##T f, UV TYPE a, UV TYPE b, UV TYPE c) { \
    return f.x*a + f.y*b + f.z*c;                                       \
  }

#define DEFINE_VEC_INTERPOLATE(TYPE, T)       \
  DEFINE_VEC_INTERPOLATE_UV(uniform, TYPE, T) \
  DEFINE_VEC_INTERPOLATE_UV(varying, TYPE, T)

DEFINE_VEC_INTERPOLATE(vec2f, f)
DEFINE_VEC_INTERPOLATE(vec3f, f)
DEFINE_VEC_INTERPOLATE(vec4f, f)

#undef DEFINE_VEC_INTERPOLATE_UV
#undef DEFINE_VEC_INTERPOLATE

// -------------------------------------------------------------------------------------------------
// Get/set functions
// -------------------------------------------------------------------------------------------------

#define DEFINE_VEC_GET_SET(TYPE, T)                                               \
  inline uniform TYPE get(const uniform vec3##T &v, uniform unsigned int dim) {   \
    return (&v.x)[dim];                                                           \
  }                                                                               \
  inline TYPE get(const vec3##T &v, uniform unsigned int dim) {                   \
    return (&v.x)[dim];                                                           \
  }                                                                               \
  inline void set(uniform vec3##T &v, uniform unsigned int dim, uniform TYPE x) { \
    (&v.x)[dim] = x;                                                              \
  }

DEFINE_VEC_GET_SET(float, f)
DEFINE_VEC_GET_SET(int, i)
DEFINE_VEC_GET_SET(unsigned int, ui)
DEFINE_VEC_GET_SET(bool, b)

#undef DEFINE_VEC_GET_SET

// -------------------------------------------------------------------------------------------------
// Output functions
// -------------------------------------------------------------------------------------------------

#define DEFINE_VEC_OUT(T)                                                                \
  inline void out(uniform vec2##T v) { print("(%,%)", v.x, v.y); }                       \
  inline void out(varying vec2##T v) { print("\n(%\n %)", v.x, v.y); }                   \
  inline void out(uniform vec3##T v) { print("(%,%,%)", v.x, v.y, v.z); }                \
  inline void out(varying vec3##T v) { print("\n(%\n %\n %)", v.x, v.y, v.z); }          \
  inline void out(uniform vec4##T v) { print("(%,%,%,%)", v.x, v.y, v.z, v.w); }         \
  inline void out(varying vec4##T v) { print("\n(%\n %\n %\n %)", v.x, v.y, v.z, v.w); } \

DEFINE_VEC_OUT(f)
DEFINE_VEC_OUT(i)
DEFINE_VEC_OUT(ui)
DEFINE_VEC_OUT(b)

#undef DEFINE_VEC_OUT
