// Copyright 2024 Intel Corporation
// SPDX-License-Identifier: Apache-2.0

unmasked void CPUConvKernel_compute(T, blockOCB)(const uniform CPUConvKernel* uniform self,
                                                 uniform int ocb, uniform int oh,
                                                 uniform int owBegin, uniform int owEnd)
{
  const uniform int oc = ocb * blockC;

#if KH == 3 && PH == 1
  const uniform int khBegin = oh > 0 ? 0 : 1;
  const uniform int khEnd   = oh < self->dst.H-1 ? 3 : 2;
#else
  const uniform int khBegin = max(PH - oh, 0);
  const uniform int khEnd   = KH - max(PH + oh - (self->dst.H-1), 0);
#endif

  for (uniform int ic = 0; ic < self->src.C; ic += blockC)
  {
    const uniform uint8* uniform srcPtr    = Tensor_getPtr(self->src, ic, oh + khBegin - PH, owBegin);
    const uniform uint8* uniform weightPtr = Tensor_getPtr(self->weight, oc, ic, khBegin, 0);
    const uniform uint8* uniform biasPtr   = (ic == 0) ? Tensor_getPtr(self->bias, oc) : NULL;
    uniform uint8* uniform dstPtr          = Tensor_getPtr(self->dst, oc, oh, owBegin);
    const uniform bool relu = self->relu && ic == (self->src.C - blockC);

    uniform int ow = owBegin; // owBegin/owEnd *must* be aligned to block boundaries
    while (ow < owEnd)
    {
      if (ow > PW - 1 && ow + blockOW + PW - 1 < self->dst.W)
      {
        // Fast path (no padding, width blocking)
        CPUConvKernel_computeBlock(T, blockOCB, blockOW)(
          srcPtr, self->src.hByteStride,
          weightPtr, biasPtr,
          dstPtr, self->dst.CByteStride,
          khEnd - khBegin,
          0, KW,
          relu);

        srcPtr += blockOW * blockC * sizeof(uniform T);
        dstPtr += blockOW * blockC * sizeof(uniform T);
        ow += blockOW;
      }
      else
      {
        // Slow path (padding, no width blocking)
        CPUConvKernel_computeBlock(T, blockOCB, 1)(
          srcPtr, self->src.hByteStride,
          weightPtr, biasPtr,
          dstPtr, self->dst.CByteStride,
          khEnd - khBegin,
        #if KW == 3 && PW == 1
          ow > 0 ? 0 : 1,
          ow < self->dst.W-1 ? 3 : 2,
        #else
          max(PW - ow, 0),
          KW - max(PW + ow - (self->dst.W-1), 0),
        #endif
          relu);

        srcPtr += blockC * sizeof(uniform T);
        dstPtr += blockC * sizeof(uniform T);
        ow++;
      }
    }
  }
}