digraph "formatter&lt; T, Char, typename std::enable_if&lt; std::is_base_of&lt; std::exception, T &gt;::value &gt;::type &gt;::parse"
{
 // LATEX_PDF_SIZE
  bgcolor="transparent";
  edge [fontname=Helvetica,fontsize=10,labelfontname=Helvetica,labelfontsize=10];
  node [fontname=Helvetica,fontsize=10,shape=box,height=0.2,width=0.4];
  rankdir="LR";
  Node1 [id="Node000001",label="formatter\< T, Char,\l typename std::enable\l_if\< std::is_base_of\<\l std::exception, T \>::value\l \>::type \>::parse",height=0.2,width=0.4,color="gray40", fillcolor="grey60", style="filled", fontcolor="black",tooltip=" "];
  Node1 -> Node2 [id="edge3_Node000001_Node000002",color="steelblue1",style="solid",tooltip=" "];
  Node2 [id="Node000002",label="parse_context::begin",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$classparse__context.html#a1d66dcf5888a1473d1ac88ee7848426b",tooltip=" "];
  Node1 -> Node3 [id="edge4_Node000001_Node000003",color="steelblue1",style="solid",tooltip=" "];
  Node3 [id="Node000003",label="parse_context::end",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$classparse__context.html#ad10a0f3a57fbac77c207ae4bf8475bc2",tooltip="Returns an iterator past the end of the format string range being parsed."];
}
