digraph "tbb::tbb_exception"
{
 // LATEX_PDF_SIZE
  bgcolor="transparent";
  edge [fontname=Helvetica,fontsize=10,labelfontname=Helvetica,labelfontsize=10];
  node [fontname=Helvetica,fontsize=10,shape=box,height=0.2,width=0.4];
  Node1 [id="Node000001",label="tbb::tbb_exception",height=0.2,width=0.4,color="gray40", fillcolor="grey60", style="filled", fontcolor="black",tooltip="Interface to be implemented by all exceptions TBB recognizes and propagates across the threads."];
  Node2 -> Node1 [id="edge4_Node000001_Node000002",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node2 [id="Node000002",label="std::exception",height=0.2,width=0.4,color="gray40", fillcolor="white", style="filled",tooltip=" "];
  Node1 -> Node3 [id="edge5_Node000001_Node000003",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node3 [id="Node000003",label="tbb::captured_exception",height=0.2,width=0.4,color="gray40", fillcolor="white", style="filled",URL="$classtbb_1_1captured__exception.html",tooltip="This class is used by TBB to propagate information about unhandled exceptions into the root thread."];
  Node1 -> Node4 [id="edge6_Node000001_Node000004",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node4 [id="Node000004",label="tbb::movable_exception\l\< ExceptionData \>",height=0.2,width=0.4,color="gray40", fillcolor="white", style="filled",URL="$classtbb_1_1movable__exception.html",tooltip="Template that can be used to implement exception that transfers arbitrary ExceptionData to the root t..."];
}
