digraph "CLI::AsSizeValue::AsSizeValue"
{
 // LATEX_PDF_SIZE
  bgcolor="transparent";
  edge [fontname=Helvetica,fontsize=10,labelfontname=Helvetica,labelfontsize=10];
  node [fontname=Helvetica,fontsize=10,shape=box,height=0.2,width=0.4];
  rankdir="LR";
  Node1 [id="Node000001",label="CLI::AsSizeValue::AsSize\lValue",height=0.2,width=0.4,color="gray40", fillcolor="grey60", style="filled", fontcolor="black",tooltip=" "];
  Node1 -> Node2 [id="edge1_Node000001_Node000002",color="steelblue1",style="solid",tooltip=" "];
  Node2 [id="Node000002",label="CLI::AsNumberWithUnit\l::AsNumberWithUnit",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$class_c_l_i_1_1_as_number_with_unit.html#af5d2fc29cd92c1821e653a97f91b00cb",tooltip=" "];
  Node2 -> Node3 [id="edge2_Node000002_Node000003",color="steelblue1",style="solid",tooltip=" "];
  Node3 [id="Node000003",label="CLI::detail::checked\l_multiply",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$namespace_c_l_i_1_1detail.html#a58ce723daebf6cd298565eb365d1b157",tooltip="Performs a *= b; if it doesn't cause integer overflow. Returns false otherwise."];
  Node3 -> Node3 [id="edge3_Node000003_Node000003",color="steelblue1",style="solid",tooltip=" "];
  Node3 -> Node4 [id="edge4_Node000003_Node000004",color="steelblue1",style="solid",tooltip=" "];
  Node4 [id="Node000004",label="CLI::detail::overflowCheck",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$namespace_c_l_i_1_1detail.html#a569135c6e266940a5f914698b9deef66",tooltip="Do a check for overflow on signed numbers"];
  Node4 -> Node4 [id="edge5_Node000004_Node000004",color="steelblue1",style="solid",tooltip=" "];
  Node2 -> Node5 [id="edge6_Node000002_Node000005",color="steelblue1",style="solid",tooltip=" "];
  Node5 [id="Node000005",label="CLI::Validator::description",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$class_c_l_i_1_1_validator.html#a35930c9b193bb0f7c5b7597dfe002e1f",tooltip="Specify the type string"];
  Node5 -> Node6 [id="edge7_Node000005_Node000006",color="steelblue1",style="solid",tooltip=" "];
  Node6 [id="Node000006",label="CLI::Validator::Validator",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$class_c_l_i_1_1_validator.html#a8d286010aa97e8cbe805d1479834b6a1",tooltip=" "];
  Node2 -> Node7 [id="edge8_Node000002_Node000007",color="steelblue1",style="solid",tooltip=" "];
  Node7 [id="Node000007",label="CLI::AsNumberWithUnit\l::generate_description",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$class_c_l_i_1_1_as_number_with_unit.html#af3af4bbb08904c621eb9d64571a80632",tooltip="Generate description like this: NUMBER [UNIT]"];
  Node7 -> Node8 [id="edge9_Node000007_Node000008",color="steelblue1",style="solid",tooltip=" "];
  Node8 [id="Node000008",label="CLI::Validator::name",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$class_c_l_i_1_1_validator.html#a8fc0ddaaa61f5dc5a7fa527d697991da",tooltip="Specify the type string"];
  Node8 -> Node6 [id="edge10_Node000008_Node000006",color="steelblue1",style="solid",tooltip=" "];
  Node2 -> Node9 [id="edge11_Node000002_Node000009",color="steelblue1",style="solid",tooltip=" "];
  Node9 [id="Node000009",label="CLI::detail::generate_map",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$namespace_c_l_i_1_1detail.html#a320e031a5eb12297a140d2d6fc73362a",tooltip="Generate a string representation of a map"];
  Node9 -> Node10 [id="edge12_Node000009_Node000010",color="steelblue1",style="solid",tooltip=" "];
  Node10 [id="Node000010",label="CLI::detail::pair_adaptor\l::first",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$struct_c_l_i_1_1detail_1_1pair__adaptor.html#ab46a8b1544ac182fe15948fe94a75bd6",tooltip="Get the first value (really just the underlying value)"];
  Node9 -> Node9 [id="edge13_Node000009_Node000009",color="steelblue1",style="solid",tooltip=" "];
  Node9 -> Node11 [id="edge14_Node000009_Node000011",color="steelblue1",style="solid",tooltip=" "];
  Node11 [id="Node000011",label="CLI::detail::join",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$namespace_c_l_i_1_1detail.html#ab351f13ec104e2cba19ec6baf4a552f6",tooltip="Simple function to join a string"];
  Node11 -> Node12 [id="edge15_Node000011_Node000012",color="steelblue1",style="solid",tooltip=" "];
  Node12 [id="Node000012",label="std::begin",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$namespacestd.html#aec76fc52a775d29bc4058c8e1405045a",tooltip=" "];
  Node11 -> Node13 [id="edge16_Node000011_Node000013",color="steelblue1",style="solid",tooltip=" "];
  Node13 [id="Node000013",label="std::end",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$namespacestd.html#a35f71a4c49ddf38bb590177e3a4b2598",tooltip=" "];
  Node9 -> Node14 [id="edge17_Node000009_Node000014",color="steelblue1",style="solid",tooltip=" "];
  Node14 [id="Node000014",label="CLI::detail::pair_adaptor\l::second",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$struct_c_l_i_1_1detail_1_1pair__adaptor.html#a69f2f87359de8d01c72ac645c6ada8c8",tooltip="Get the second value (really just the underlying value)"];
  Node9 -> Node15 [id="edge18_Node000009_Node000015",color="steelblue1",style="solid",tooltip=" "];
  Node15 [id="Node000015",label="CLI::detail::smart\l_deref",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$namespace_c_l_i_1_1detail.html#a0c6cf48feae9d909d52e7b4c346cba29",tooltip=" "];
  Node15 -> Node15 [id="edge19_Node000015_Node000015",color="steelblue1",style="solid",tooltip=" "];
  Node9 -> Node16 [id="edge20_Node000009_Node000016",color="steelblue1",style="solid",tooltip=" "];
  Node16 [id="Node000016",label="CLI::detail::to_string",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$namespace_c_l_i_1_1detail.html#a0e94052d485636fc9f18c21009026577",tooltip="Convert an object to a string (directly forward if this can become a string)"];
  Node2 -> Node17 [id="edge21_Node000002_Node000017",color="steelblue1",style="solid",tooltip=" "];
  Node17 [id="Node000017",label="CLI::detail::rtrim",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$namespace_c_l_i_1_1detail.html#aef3c5cc699d323f04f21cc1c124e772e",tooltip="Trim whitespace from right of string"];
  Node2 -> Node18 [id="edge22_Node000002_Node000018",color="steelblue1",style="solid",tooltip=" "];
  Node18 [id="Node000018",label="CLI::detail::to_lower",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$namespace_c_l_i_1_1detail.html#ae83709ec148057ec53df4383645727e9",tooltip="Return a lower case version of a string"];
  Node18 -> Node12 [id="edge23_Node000018_Node000012",color="steelblue1",style="solid",tooltip=" "];
  Node18 -> Node13 [id="edge24_Node000018_Node000013",color="steelblue1",style="solid",tooltip=" "];
  Node2 -> Node16 [id="edge25_Node000002_Node000016",color="steelblue1",style="solid",tooltip=" "];
  Node2 -> Node19 [id="edge26_Node000002_Node000019",color="steelblue1",style="solid",tooltip=" "];
  Node19 [id="Node000019",label="CLI::detail::trim",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$namespace_c_l_i_1_1detail.html#a621323632158048f6168deacc432b838",tooltip="Trim whitespace from string"];
  Node19 -> Node20 [id="edge27_Node000019_Node000020",color="steelblue1",style="solid",tooltip=" "];
  Node20 [id="Node000020",label="CLI::detail::ltrim",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$namespace_c_l_i_1_1detail.html#a603eeabf0b2663fa405871b8318c1507",tooltip="Trim whitespace from left of string"];
  Node19 -> Node17 [id="edge28_Node000019_Node000017",color="steelblue1",style="solid",tooltip=" "];
  Node2 -> Node21 [id="edge29_Node000002_Node000021",color="steelblue1",style="solid",tooltip=" "];
  Node21 [id="Node000021",label="CLI::AsNumberWithUnit\l::validate_mapping",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$class_c_l_i_1_1_as_number_with_unit.html#ab965db567f374cacdafa51564d1f1b30",tooltip=" "];
  Node21 -> Node22 [id="edge30_Node000021_Node000022",color="steelblue1",style="solid",tooltip=" "];
  Node22 [id="Node000022",label="CLI::detail::isalpha",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$namespace_c_l_i_1_1detail.html#ac89ce22647a9f697b800d9c47b9d956f",tooltip="Verify that str consists of letters only"];
  Node21 -> Node18 [id="edge31_Node000021_Node000018",color="steelblue1",style="solid",tooltip=" "];
  Node1 -> Node5 [id="edge32_Node000001_Node000005",color="steelblue1",style="solid",tooltip=" "];
  Node1 -> Node23 [id="edge33_Node000001_Node000023",color="steelblue1",style="solid",tooltip=" "];
  Node23 [id="Node000023",label="CLI::AsSizeValue::get\l_mapping",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$class_c_l_i_1_1_as_size_value.html#a4e41bd2fea4bcafd02506492b767eb2a",tooltip="Cache calculated mapping"];
  Node23 -> Node24 [id="edge34_Node000023_Node000024",color="steelblue1",style="solid",tooltip=" "];
  Node24 [id="Node000024",label="CLI::AsSizeValue::init\l_mapping",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$class_c_l_i_1_1_as_size_value.html#abc4dece8cda0ba54869db11133c0ef4a",tooltip="Get <size unit, factor> mapping"];
}
