digraph "CLI::Validator"
{
 // LATEX_PDF_SIZE
  bgcolor="transparent";
  edge [fontname=Helvetica,fontsize=10,labelfontname=Helvetica,labelfontsize=10];
  node [fontname=Helvetica,fontsize=10,shape=box,height=0.2,width=0.4];
  rankdir="LR";
  Node1 [id="Node000001",label="CLI::Validator",height=0.2,width=0.4,color="gray40", fillcolor="grey60", style="filled", fontcolor="black",tooltip="Some validators that are provided"];
  Node1 -> Node2 [id="edge1_Node000001_Node000002",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node2 [id="Node000002",label="CLI::AsNumberWithUnit",height=0.2,width=0.4,color="gray40", fillcolor="white", style="filled",URL="$class_c_l_i_1_1_as_number_with_unit.html",tooltip=" "];
  Node2 -> Node3 [id="edge2_Node000002_Node000003",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node3 [id="Node000003",label="CLI::AsSizeValue",height=0.2,width=0.4,color="gray40", fillcolor="white", style="filled",URL="$class_c_l_i_1_1_as_size_value.html",tooltip=" "];
  Node1 -> Node4 [id="edge3_Node000001_Node000004",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node4 [id="Node000004",label="CLI::Bound",height=0.2,width=0.4,color="gray40", fillcolor="white", style="filled",URL="$class_c_l_i_1_1_bound.html",tooltip="Produce a bounded range (factory). Min and max are inclusive."];
  Node1 -> Node5 [id="edge4_Node000001_Node000005",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node5 [id="Node000005",label="CLI::CheckedTransformer",height=0.2,width=0.4,color="gray40", fillcolor="white", style="filled",URL="$class_c_l_i_1_1_checked_transformer.html",tooltip="translate named items to other or a value set"];
  Node1 -> Node6 [id="edge5_Node000001_Node000006",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node6 [id="Node000006",label="CLI::CustomValidator",height=0.2,width=0.4,color="gray40", fillcolor="white", style="filled",URL="$class_c_l_i_1_1_custom_validator.html",tooltip="Class wrapping some of the accessors of Validator"];
  Node1 -> Node7 [id="edge6_Node000001_Node000007",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node7 [id="Node000007",label="CLI::FileOnDefaultPath",height=0.2,width=0.4,color="gray40", fillcolor="white", style="filled",URL="$class_c_l_i_1_1_file_on_default_path.html",tooltip=" "];
  Node1 -> Node8 [id="edge7_Node000001_Node000008",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node8 [id="Node000008",label="CLI::IsMember",height=0.2,width=0.4,color="gray40", fillcolor="white", style="filled",URL="$class_c_l_i_1_1_is_member.html",tooltip="Verify items are in a set"];
  Node1 -> Node9 [id="edge8_Node000001_Node000009",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node9 [id="Node000009",label="CLI::Range",height=0.2,width=0.4,color="gray40", fillcolor="white", style="filled",URL="$class_c_l_i_1_1_range.html",tooltip="Produce a range (factory). Min and max are inclusive."];
  Node1 -> Node10 [id="edge9_Node000001_Node000010",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node10 [id="Node000010",label="CLI::Transformer",height=0.2,width=0.4,color="gray40", fillcolor="white", style="filled",URL="$class_c_l_i_1_1_transformer.html",tooltip="Translate named items to other or a value set"];
  Node1 -> Node11 [id="edge10_Node000001_Node000011",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node11 [id="Node000011",label="CLI::TypeValidator\l\< DesiredType \>",height=0.2,width=0.4,color="gray40", fillcolor="white", style="filled",URL="$class_c_l_i_1_1_type_validator.html",tooltip="Validate the input as a particular type"];
  Node1 -> Node12 [id="edge11_Node000001_Node000012",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node12 [id="Node000012",label="CLI::detail::EscapedString\lTransformer",height=0.2,width=0.4,color="gray40", fillcolor="white", style="filled",URL="$class_c_l_i_1_1detail_1_1_escaped_string_transformer.html",tooltip=" "];
  Node1 -> Node13 [id="edge12_Node000001_Node000013",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node13 [id="Node000013",label="CLI::detail::ExistingDirectory\lValidator",height=0.2,width=0.4,color="gray40", fillcolor="white", style="filled",URL="$class_c_l_i_1_1detail_1_1_existing_directory_validator.html",tooltip="Check for an existing directory (returns error message if check fails)"];
  Node1 -> Node14 [id="edge13_Node000001_Node000014",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node14 [id="Node000014",label="CLI::detail::ExistingFile\lValidator",height=0.2,width=0.4,color="gray40", fillcolor="white", style="filled",URL="$class_c_l_i_1_1detail_1_1_existing_file_validator.html",tooltip="Check for an existing file (returns error message if check fails)"];
  Node1 -> Node15 [id="edge14_Node000001_Node000015",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node15 [id="Node000015",label="CLI::detail::ExistingPath\lValidator",height=0.2,width=0.4,color="gray40", fillcolor="white", style="filled",URL="$class_c_l_i_1_1detail_1_1_existing_path_validator.html",tooltip="Check for an existing path"];
  Node1 -> Node16 [id="edge15_Node000001_Node000016",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node16 [id="Node000016",label="CLI::detail::IPV4Validator",height=0.2,width=0.4,color="gray40", fillcolor="white", style="filled",URL="$class_c_l_i_1_1detail_1_1_i_p_v4_validator.html",tooltip="Validate the given string is a legal ipv4 address"];
  Node1 -> Node17 [id="edge16_Node000001_Node000017",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node17 [id="Node000017",label="CLI::detail::Nonexistent\lPathValidator",height=0.2,width=0.4,color="gray40", fillcolor="white", style="filled",URL="$class_c_l_i_1_1detail_1_1_nonexistent_path_validator.html",tooltip="Check for an non-existing path"];
}
