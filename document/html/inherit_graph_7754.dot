digraph "类继承关系图"
{
 // LATEX_PDF_SIZE
  bgcolor="transparent";
  edge [fontname=Helvetica,fontsize=10,labelfontname=Helvetica,labelfontsize=10];
  node [fontname=Helvetica,fontsize=10,shape=box,height=0.2,width=0.4];
  rankdir="LR";
  Node0 [id="Node000000",label="std::allocator",height=0.2,width=0.4,color="grey60", fillcolor="#E0E0E0", style="filled",tooltip=" "];
  Node0 -> Node1 [id="edge6517_Node000000_Node000001",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node1 [id="Node000001",label="Eigen::aligned_allocator\< U \>",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$class_eigen_1_1aligned__allocator.html",tooltip=" "];
  Node0 -> Node2 [id="edge6518_Node000000_Node000002",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node2 [id="Node000002",label="local_counting_allocator\l\< std::allocator\< MyData \> \>",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$classlocal__counting__allocator.html",tooltip=" "];
  Node0 -> Node3 [id="edge6519_Node000000_Node000003",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node3 [id="Node000003",label="local_counting_allocator\l\< std::allocator\< char \> \>",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$classlocal__counting__allocator.html",tooltip=" "];
  Node3 -> Node4 [id="edge6520_Node000003_Node000004",dir="back",color="firebrick4",style="solid",tooltip=" "];
  Node4 [id="Node000004",label="MinimalAllocator",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$class_minimal_allocator.html",tooltip=" "];
  Node0 -> Node5 [id="edge6521_Node000000_Node000005",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node5 [id="Node000005",label="Eigen::aligned_allocator\< T \>",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$class_eigen_1_1aligned__allocator.html",tooltip="STL compatible allocator to use with types requiring a non standrad alignment."];
  Node0 -> Node6 [id="edge6522_Node000000_Node000006",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node6 [id="Node000006",label="debug_allocator\< T,\l Allocator \>",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$classdebug__allocator.html",tooltip=" "];
  Node6 -> Node7 [id="edge6523_Node000006_Node000007",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node7 [id="Node000007",label="local_counting_allocator\l\< debug_allocator\< std\l::pair\< const int, int \>\l, std::allocator \> \>",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$classlocal__counting__allocator.html",tooltip=" "];
  Node0 -> Node8 [id="edge6524_Node000000_Node000008",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node8 [id="Node000008",label="stateful_allocator\l\< T, pocma, Allocator \>",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$classstateful__allocator.html",tooltip=" "];
}
