digraph "tbb::internal::custom_scheduler::receive_or_steal_task"
{
 // LATEX_PDF_SIZE
  bgcolor="transparent";
  edge [fontname=Helvetica,fontsize=10,labelfontname=Helvetica,labelfontsize=10];
  node [fontname=Helvetica,fontsize=10,shape=box,height=0.2,width=0.4];
  rankdir="LR";
  Node1 [id="Node000001",label="tbb::internal::custom\l_scheduler::receive_or\l_steal_task",height=0.2,width=0.4,color="gray40", fillcolor="grey60", style="filled", fontcolor="black",tooltip="Try getting a task from the mailbox or stealing from another scheduler."];
  Node1 -> Node2 [id="edge1_Node000001_Node000002",color="steelblue1",style="solid",tooltip=" "];
  Node2 [id="Node000002",label="tbb::internal::generic\l_scheduler::can_steal",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$classtbb_1_1internal_1_1generic__scheduler.html#a1c00f465a90ee09a240d1f81de5f635b",tooltip="Returns true if stealing is allowed"];
  Node2 -> Node3 [id="edge2_Node000002_Node000003",color="steelblue1",style="solid",tooltip=" "];
  Node3 [id="Node000003",label="__TBB_get_bsp",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$linux__ia64_8h.html#ad5657a41dbedfab5a94916d82d3f6778",tooltip="Retrieves the current RSE backing store pointer. IA64 specific."];
  Node1 -> Node4 [id="edge3_Node000001_Node000004",color="steelblue1",style="solid",tooltip=" "];
  Node4 [id="Node000004",label="tbb::internal::generic\l_scheduler::get_mailbox_task",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$classtbb_1_1internal_1_1generic__scheduler.html#a5657ac6c517d9bbf59a424ef330640bb",tooltip="Attempt to get a task from the mailbox."];
  Node4 -> Node5 [id="edge4_Node000004_Node000005",color="steelblue1",style="solid",tooltip=" "];
  Node5 [id="Node000005",label="tbb::internal::generic\l_scheduler::free_task",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$classtbb_1_1internal_1_1generic__scheduler.html#a12dd37171af77214add72a973e6b71ba",tooltip="Put task on free list."];
  Node5 -> Node6 [id="edge5_Node000005_Node000006",color="steelblue1",style="solid",tooltip=" "];
  Node6 [id="Node000006",label="tbb::internal::generic\l_scheduler::deallocate_task",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$classtbb_1_1internal_1_1generic__scheduler.html#ad965858a5e7cb5574926d8d1692063b5",tooltip="Return task object to the memory allocator."];
  Node6 -> Node7 [id="edge6_Node000006_Node000007",color="steelblue1",style="solid",tooltip=" "];
  Node7 [id="Node000007",label="tbb::internal::NFS_Free",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$namespacetbb_1_1internal.html#abd3fdd42ea716867fc95116354481b4e",tooltip=" "];
  Node5 -> Node8 [id="edge7_Node000005_Node000008",color="steelblue1",style="solid",tooltip=" "];
  Node8 [id="Node000008",label="tbb::internal::generic\l_scheduler::free_nonlocal\l_small_task",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$classtbb_1_1internal_1_1generic__scheduler.html#a720c816c0253fe199e4583cd24090e9b",tooltip="Free a small task t that that was allocated by a different scheduler"];
  Node8 -> Node9 [id="edge8_Node000008_Node000009",color="steelblue1",style="solid",tooltip=" "];
  Node9 [id="Node000009",label="tbb::internal::as_atomic",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$namespacetbb_1_1internal.html#a958f482f9d5f3476ca70610af5336040",tooltip=" "];
  Node8 -> Node6 [id="edge9_Node000008_Node000006",color="steelblue1",style="solid",tooltip=" "];
  Node8 -> Node10 [id="edge10_Node000008_Node000010",color="steelblue1",style="solid",tooltip=" "];
  Node10 [id="Node000010",label="tbb::internal::generic\l_scheduler::generic_scheduler",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$classtbb_1_1internal_1_1generic__scheduler.html#a838f6ccf79d7ee8a55843de2f8004759",tooltip=" "];
  Node10 -> Node11 [id="edge11_Node000010_Node000011",color="steelblue1",style="solid",tooltip=" "];
  Node11 [id="Node000011",label="tbb::internal::generic\l_scheduler::allocate_task",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$classtbb_1_1internal_1_1generic__scheduler.html#aa0d316e9f3063c6b57fa21e0716d4d77",tooltip="Allocate task object, either from the heap or a free list."];
  Node11 -> Node12 [id="edge12_Node000011_Node000012",color="steelblue1",style="solid",tooltip=" "];
  Node12 [id="Node000012",label="tbb::internal::NFS\l_Allocate",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$namespacetbb_1_1internal.html#a395611542e21705f49de2a06e2c88f59",tooltip=" "];
  Node12 -> Node13 [id="edge13_Node000012_Node000013",color="steelblue1",style="solid",tooltip=" "];
  Node13 [id="Node000013",label="is_aligned",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$harness_8h.html#a2cd6d606b7a354545b2cdecca67efa44",tooltip=" "];
  Node12 -> Node14 [id="edge14_Node000012_Node000014",color="steelblue1",style="solid",tooltip=" "];
  Node14 [id="Node000014",label="tbb::internal::throw\l_exception",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$namespacetbb_1_1internal.html#a61a681f9fd15fdb055f7725d6416ddf4",tooltip="Versionless convenience wrapper for throw_exception_v4()"];
  Node14 -> Node15 [id="edge15_Node000014_Node000015",color="steelblue1",style="solid",tooltip=" "];
  Node15 [id="Node000015",label="tbb::internal::throw\l_exception_v4",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$namespacetbb_1_1internal.html#adccc1f69ee5a85094eb6a5f9fbac89d7",tooltip="Gathers all throw operators in one place."];
  Node10 -> Node16 [id="edge16_Node000010_Node000016",color="steelblue1",style="solid",tooltip=" "];
  Node16 [id="Node000016",label="tbb::internal::governor\l::is_set",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$classtbb_1_1internal_1_1governor.html#a14d4453f34a770b1c983c2ed38570e31",tooltip="Used to check validity of the local scheduler TLS contents."];
  Node16 -> Node17 [id="edge17_Node000016_Node000017",color="steelblue1",style="solid",tooltip=" "];
  Node17 [id="Node000017",label="tbb::internal::governor\l::tls_value_of",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$classtbb_1_1internal_1_1governor.html#a342eb43ff89d1b0da4cb9aa5417b3965",tooltip="Computes the value of the TLS"];
  Node8 -> Node18 [id="edge18_Node000008_Node000018",color="steelblue1",style="solid",tooltip=" "];
  Node18 [id="Node000018",label="tbb::internal::generic\l_scheduler::plugged_return_list",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$classtbb_1_1internal_1_1generic__scheduler.html#a190c2087092b3e0f2a39b01c7cc27e93",tooltip="Special value used to mark my_return_list as not taking any more entries."];
  Node1 -> Node19 [id="edge19_Node000001_Node000019",color="steelblue1",style="solid",tooltip=" "];
  Node19 [id="Node000019",label="tbb::internal::generic\l_scheduler::is_proxy",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$classtbb_1_1internal_1_1generic__scheduler.html#a868812dd8d875a225a6f589fdbaafe54",tooltip="True if t is a task_proxy"];
  Node1 -> Node20 [id="edge20_Node000001_Node000020",color="steelblue1",style="solid",tooltip=" "];
  Node20 [id="Node000020",label="tbb::internal::generic\l_scheduler::is_worker",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$classtbb_1_1internal_1_1generic__scheduler.html#a24ecab941cdf8ff762126f1c65e5274a",tooltip="True if running on a worker thread, false otherwise."];
  Node1 -> Node21 [id="edge21_Node000001_Node000021",color="steelblue1",style="solid",tooltip=" "];
  Node21 [id="Node000021",label="tbb::internal::generic\l_scheduler::master_outermost_level",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$classtbb_1_1internal_1_1generic__scheduler.html#a744eb36f568cf2c726a0920494e5579d",tooltip="True if the scheduler is on the outermost dispatch level in a master thread."];
  Node21 -> Node20 [id="edge22_Node000021_Node000020",color="steelblue1",style="solid",tooltip=" "];
  Node21 -> Node22 [id="edge23_Node000021_Node000022",color="steelblue1",style="solid",tooltip=" "];
  Node22 [id="Node000022",label="tbb::internal::generic\l_scheduler::outermost_level",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$classtbb_1_1internal_1_1generic__scheduler.html#ab09f5bf82f328f50d815d38f8d553f5f",tooltip="True if the scheduler is on the outermost dispatch level."];
  Node1 -> Node23 [id="edge24_Node000001_Node000023",color="steelblue1",style="solid",tooltip=" "];
  Node23 [id="Node000023",label="tbb::internal::prolonged\l_pause",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$namespacetbb_1_1internal.html#a0c5ac9e978873b08137acc8b6d584567",tooltip=" "];
  Node1 -> Node24 [id="edge25_Node000001_Node000024",color="steelblue1",style="solid",tooltip=" "];
  Node24 [id="Node000024",label="tbb::internal::generic\l_scheduler::steal_task",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$classtbb_1_1internal_1_1generic__scheduler.html#abb8f3f3967170ca9398e55b90220c3cb",tooltip="Attempts to steal a task from a randomly chosen thread/scheduler"];
  Node24 -> Node25 [id="edge26_Node000024_Node000025",color="steelblue1",style="solid",tooltip=" "];
  Node25 [id="Node000025",label="tbb::internal::task\l_proxy::extract_task",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$structtbb_1_1internal_1_1task__proxy.html#a40da3f9c1cf3a45264946dac05f7b9b6",tooltip="Returns a pointer to the encapsulated task or NULL, and frees proxy if necessary."];
  Node25 -> Node9 [id="edge27_Node000025_Node000009",color="steelblue1",style="solid",tooltip=" "];
  Node25 -> Node26 [id="edge28_Node000025_Node000026",color="steelblue1",style="solid",tooltip=" "];
  Node26 [id="Node000026",label="tbb::internal::task\l_proxy::is_shared",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$structtbb_1_1internal_1_1task__proxy.html#a364254f54e3817ee490eab693b9ee916",tooltip="True if the proxy is stored both in its sender's pool and in the destination mailbox."];
  Node25 -> Node27 [id="edge29_Node000025_Node000027",color="steelblue1",style="solid",tooltip=" "];
  Node27 [id="Node000027",label="tbb::internal::task\l_proxy::task_ptr",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$structtbb_1_1internal_1_1task__proxy.html#a82adc9bcd803435a2edfc7b29e510e36",tooltip="Returns a pointer to the encapsulated task or NULL."];
  Node24 -> Node5 [id="edge30_Node000024_Node000005",color="steelblue1",style="solid",tooltip=" "];
  Node24 -> Node19 [id="edge31_Node000024_Node000019",color="steelblue1",style="solid",tooltip=" "];
  Node24 -> Node28 [id="edge32_Node000024_Node000028",color="steelblue1",style="solid",tooltip=" "];
  Node28 [id="Node000028",label="tbb::internal::generic\l_scheduler::is_version\l_3_task",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$classtbb_1_1internal_1_1generic__scheduler.html#a33519b4cf710f8c46129672f79fb6ec4",tooltip=" "];
  Node24 -> Node29 [id="edge33_Node000024_Node000029",color="steelblue1",style="solid",tooltip=" "];
  Node29 [id="Node000029",label="tbb::internal::generic\l_scheduler::steal_task_from",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$classtbb_1_1internal_1_1generic__scheduler.html#a15b506cb1b1da8e37255fc2fcdf250f0",tooltip="Steal task from another scheduler's ready pool."];
  Node29 -> Node19 [id="edge34_Node000029_Node000019",color="steelblue1",style="solid",tooltip=" "];
  Node29 -> Node26 [id="edge35_Node000029_Node000026",color="steelblue1",style="solid",tooltip=" "];
  Node29 -> Node30 [id="edge36_Node000029_Node000030",color="steelblue1",style="solid",tooltip=" "];
  Node30 [id="Node000030",label="tbb::internal::generic\l_scheduler::lock_task_pool",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$classtbb_1_1internal_1_1generic__scheduler.html#a3def047033ef29c77c43db170a38df2c",tooltip="Locks victim's task pool, and returns pointer to it. The pointer can be NULL."];
  Node30 -> Node9 [id="edge37_Node000030_Node000009",color="steelblue1",style="solid",tooltip=" "];
  Node29 -> Node31 [id="edge38_Node000029_Node000031",color="steelblue1",style="solid",tooltip=" "];
  Node31 [id="Node000031",label="tbb::internal::mail\l_outbox::recipient_is_idle",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$classtbb_1_1internal_1_1mail__outbox.html#acaf8c50736e4d27b6755f006f1a5a38e",tooltip="True if thread that owns this mailbox is looking for work."];
  Node29 -> Node32 [id="edge39_Node000029_Node000032",color="steelblue1",style="solid",tooltip=" "];
  Node32 [id="Node000032",label="tbb::internal::generic\l_scheduler::unlock_task_pool",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$classtbb_1_1internal_1_1generic__scheduler.html#a9deee19e39b49b7e1f44c87533600b46",tooltip="Unlocks victim's task pool"];
  Node1 -> Node33 [id="edge40_Node000001_Node000033",color="steelblue1",style="solid",tooltip=" "];
  Node33 [id="Node000033",label="tbb::internal::generic\l_scheduler::worker_outermost_level",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$classtbb_1_1internal_1_1generic__scheduler.html#aec76a489fe5368ede0d1658cbb74984b",tooltip="True if the scheduler is on the outermost dispatch level in a worker thread."];
  Node33 -> Node20 [id="edge41_Node000033_Node000020",color="steelblue1",style="solid",tooltip=" "];
  Node33 -> Node22 [id="edge42_Node000033_Node000022",color="steelblue1",style="solid",tooltip=" "];
}
